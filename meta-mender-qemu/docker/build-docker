#!/bin/bash

cd "$(dirname "$0")"

BUILD_DEFAULTS=1
IMAGE_NAME="core-image-full-cmdline"
EMBEDDED_IMAGE_NAME=""

usage() {
    cat <<EOF
$(basename "$0") [options] MACHINE [docker build options]

Builds the docker container for the specified MACHINE target.
All options after MACHINE are given to "docker build".

--no-defaults
	Do not automatically copy over needed directories and pass needed
	arguments. If you use this you must pass the arguments and prepare the
	files yourself. Other options have no effect if this is passed.
-i, --image <IMAGE_NAME>
	The name of the image being used in the container. Defaults to
	$IMAGE_NAME.
-I, --embedded-image <IMAGE_NAME>
	The image being put inside the generated image. Defaults to
	$(bitbake -e $IMAGE_NAME | egrep '^IMAGE_LINK_NAME=').
EOF
}

while [ -n "$1" ]; do
    case "$1" in
        --no-defaults)
            BUILD_DEFAULTS=0
            ;;
        -i|--image)
            shift
            if [ -z "$1" ]; then
                echo "Need to specify image name with -i / --image." 1>&2
                exit 1
            fi
            IMAGE_NAME="$1"
            ;;
        -I|--embedded-image)
            shift
            if [ -z "$1" ]; then
                echo "Need to specify image name with -I / --embedded-image." 1>&2
                exit 1
            fi
            EMBEDDED_IMAGE_NAME="$1"
            ;;
        -h|--help)
            usage
            exit 1
            ;;
        -*)
            echo "Unrecognized option: $1"
            exit 1
            ;;
        *)
            MACHINE="$1"
            shift
            break
            ;;
    esac
    shift
done

if [ -z "$MACHINE" ]; then
    usage
    exit 1
fi

if [ ! -d "$MACHINE" ]; then
    echo "$MACHINE configuration does not exist."
    exit 1
fi

set -e

DOCKER_ARGS=
if [ $BUILD_DEFAULTS = 1 ]; then
    if [ ! -d "$BUILDDIR" ]; then
        echo "BUILDDIR must be to a valid build directory (use oe-init-build-env)."
        exit 1
    fi

    # Fish out some settings from Bitbake.
    eval "$(bitbake -e $IMAGE_NAME | egrep '^MENDER_FEATURES=')"
    eval "$(bitbake -e $IMAGE_NAME | egrep '^IMAGE_LINK_NAME=')"

    if egrep -q '\bmender-image-uefi\b' <<<"$MENDER_FEATURES"; then
        DISK_IMG="$IMAGE_LINK_NAME.uefiimg"
    elif egrep -q '\bmender-image-sd\b' <<<"$MENDER_FEATURES"; then
        DISK_IMG="$IMAGE_LINK_NAME.sdimg"
    else
        echo "Neither mender-image-uefi nor mender-image-sd are set! Don't know which image to use!" 1>&2
        exit 1
    fi
    if [ "${EMBEDDED_IMAGE_NAME}" != "" ]; then
     DISK_IMG=$(basename "${EMBEDDED_IMAGE_NAME}")
     echo "using ${EMBEDDED_IMAGE_NAME} as embedded image."
     ln -Lf "${EMBEDDED_IMAGE_NAME}" "$MACHINE/"
    else
     ln -Lf "$BUILDDIR/tmp/deploy/images/$MACHINE/$DISK_IMG" "$MACHINE/"
    fi
    cat > "$MACHINE/env.txt" <<EOF
export MACHINE=$MACHINE
export DISK_IMG=/$DISK_IMG
EOF

    case "$MACHINE" in
        qemux86-64)
            ln -Lf "$BUILDDIR/tmp/deploy/images/$MACHINE/ovmf.qcow2" "$MACHINE/"
            ln -Lf "$BUILDDIR/tmp/deploy/images/$MACHINE/ovmf.vars.qcow2" "$MACHINE/"
            DOCKER_ARGS="--build-arg DISK_IMAGE=$DISK_IMG --build-arg BOOTLOADER=ovmf.qcow2 --build-arg BOOTLOADER_DATA=ovmf.vars.qcow2"
            cat >> "$MACHINE/env.txt" <<EOF
export BOOTLOADER=/ovmf.qcow2
export BOOTLOADER_DATA=/ovmf.vars.qcow2
EOF
            ;;
        vexpress-qemu)
            ln -Lf "$BUILDDIR/tmp/deploy/images/$MACHINE/u-boot.elf" "$MACHINE/"
            DOCKER_ARGS="--build-arg DISK_IMAGE=$DISK_IMG --build-arg BOOTLOADER=u-boot.elf"
            cat >> "$MACHINE/env.txt" <<EOF
export BOOTLOADER=/u-boot.elf
EOF
            ;;
    esac

    # Copy needed dirs to docker context.
    cp -rLlf ../scripts "$MACHINE/"
fi

docker build $DOCKER_ARGS "$@" "$MACHINE"
exit $?
